#include <TinyScreen.h>

// Library and examples are here
// https://github.com/TinyCircuits/TinyCircuits-TinyScreen_Lib/blob/master/examples/TinyScreenBasicExample/TinyScreenBasicExample.ino

unsigned long millisOffsetCount = 0;

#define menu_debug_print false
uint32_t doVibrate = 0;

TinyScreen display = TinyScreen(TinyScreenDefault);
#if defined (ARDUINO_ARCH_AVR)
#define SerialMonitorInterface Serial
#include <TimeLib.h>

#elif defined(ARDUINO_ARCH_SAMD)
#define SerialMonitorInterface SerialUSB
#include <RTCZero.h>
#include <time.h>
RTCZero RTCZ;
uint32_t startTime = 0;
uint32_t sleepTime = 0;

void wakeHandler() {
  if (sleepTime) {
    millisOffsetCount += (RTCZ.getEpoch() - sleepTime);
    sleepTime = 0;
  }
}

void RTCwakeHandler() {
  //not used
}

void watchSleep() {
  if (doVibrate)
    return;
  sleepTime = RTCZ.getEpoch();
  RTCZ.standbyMode();
}
#endif


uint8_t defaultFontColor = TS_8b_White;
uint8_t defaultFontBG = TS_8b_Black;
uint8_t inactiveFontColor = TS_8b_Gray;
uint8_t inactiveFontBG = TS_8b_Black;

uint8_t topBarHeight = 10;
uint8_t timeY = 14;
uint8_t menuTextY[4] = {12, 25, 38, 51};

unsigned long lastReceivedTime = 0;

unsigned long batteryUpdateInterval = 10000;
unsigned long lastBatteryUpdate = 0;

unsigned long sleepTimer = 0;
int sleepTimeout = 5;

uint8_t rewriteTime = true;

uint8_t displayOn = 0;
uint8_t buttonReleased = 1;
uint8_t rewriteMenu = false;
uint8_t amtNotifications = 0;
uint8_t lastAmtNotificationsShown = -1;
unsigned long mainDisplayUpdateInterval = 300;
unsigned long lastMainDisplayUpdate = 0;
char notificationLine1[20] = "";
char notificationLine2[20] = "";

uint8_t vibratePin = 4;
uint8_t vibratePinActive = HIGH;
uint8_t vibratePinInactive = LOW;


int brightness = 3;
uint8_t lastSetBrightness = 100;

const FONT_INFO& font10pt = thinPixel7_10ptFontInfo;
const FONT_INFO& font22pt = liberationSansNarrow_22ptFontInfo;

uint32_t millisOffset() {
#if defined (ARDUINO_ARCH_AVR)
  return millis();
#elif defined(ARDUINO_ARCH_SAMD)
  return (millisOffsetCount * 1000ul) + millis();
#endif
}



const uint8_t displayStateHome = 0x01;
const uint8_t displayStateMenu = 0x02;
const uint8_t displayStateEditor = 0x03;

uint8_t currentDisplayState = displayStateHome;
void (*menuHandler)(uint8_t) = NULL;
uint8_t (*editorHandler)(uint8_t, int*, char*, void (*)()) = NULL;


const uint8_t upButton = TSButtonUpperRight;
const uint8_t downButton = TSButtonLowerRight;
// const uint8_t selectButton = TSButtonLowerLeft;
// const uint8_t backButton = TSButtonUpperLeft;
const uint8_t selectButton = TSButtonUpperLeft;
const uint8_t backButton = TSButtonLowerLeft;
const uint8_t menuButton = TSButtonUpperLeft;
// const uint8_t menuButton = TSButtonLowerLeft;
const uint8_t viewButton = TSButtonUpperRight;
//const uint8_t viewButton = TSButtonLowerRight;
const uint8_t clearButton = TSButtonLowerRight;

void buttonPress(uint8_t buttons) {
  if (currentDisplayState == displayStateHome) {
  /*
    if (buttons == viewButton) {
      menuHandler = viewNotifications;
      menuHandler(0);
    } else */ if (buttons == menuButton) {
      menuHandler = viewMenu;
      menuHandler(0);
    }
  } else if (currentDisplayState == displayStateMenu) {
    if (menuHandler) {
      menuHandler(buttons);
    }
  } else if (currentDisplayState == displayStateEditor) {
    if (editorHandler) {
      editorHandler(buttons, 0, 0, NULL);
    }
  }
}

void viewNotifications(uint8_t button) {
  if (!button) {
    if (menu_debug_print)SerialMonitorInterface.println("viewNotificationsInit");
    currentDisplayState = displayStateMenu;
    display.clearWindow(0, 12, 96, 64);
    display.setFont(font10pt);
    display.fontColor(defaultFontColor, defaultFontBG);
    if (amtNotifications) {
      if (menu_debug_print)SerialMonitorInterface.println("amtNotifications=true");
      //display.setCursor(0, menuTextY[1]);
      //display.setCursor(0, 0);
      //display.print(ANCSNotificationTitle());

      int line = 0;
      int totalMessageChars = strlen(notificationLine2);
      int printedChars = 0;
      while (printedChars < totalMessageChars && line < 3) {
        char tempPrintBuff[40] = "";
        int tempPrintBuffPos = 0;
        while (display.getPrintWidth(tempPrintBuff) < 90 && printedChars < totalMessageChars) {
          if (!(tempPrintBuffPos == 0 && notificationLine2[printedChars] == ' ')) {
            tempPrintBuff[tempPrintBuffPos] = notificationLine2[printedChars];
            tempPrintBuffPos++;
          }
          printedChars++;
          tempPrintBuff[tempPrintBuffPos] = '\0';
        }
        display.setCursor(0, menuTextY[line]);
        display.print((char*)tempPrintBuff);
        line++;
      }



      display.setCursor(0, menuTextY[3]);
      display.print(F("< "));
      display.print("Clear");

      char backStr[] = "Back >";
      int Xpos = 95 - display.getPrintWidth(backStr);
      display.setCursor(Xpos, menuTextY[3]);
      display.print(backStr);
    } else {
      if (menu_debug_print)SerialMonitorInterface.println("amtNotifications=false");
      display.setCursor(0, menuTextY[0]);
      display.print(F("  No notifications."));
      char backStr[] = "Back >";
      int Xpos = 95 - display.getPrintWidth(backStr);
      display.setCursor(Xpos, menuTextY[3]);
      display.print(backStr);
    }
  } else {
    if (button == clearButton) {//actually back?
      currentDisplayState = displayStateHome;
      initHomeScreen();
    } else if (button == selectButton) { //do action
      amtNotifications = 0;
      //ANCSPerformNotificationNegativeAction();
      currentDisplayState = displayStateHome;
      initHomeScreen();
    }
  }
}


void initHomeScreen() {
  display.clearWindow(0, 12, 96, 64);
  rewriteTime = true;
  rewriteMenu = true;
  updateMainDisplay();
}

uint8_t lastDisplayedDay = -1;
uint8_t lastDisplayedMonth = -1;
uint8_t lastDisplayedYear = -1;

void updateDateDisplay() {
#if defined (ARDUINO_ARCH_AVR)
  int currentDay = day();
  int currentMonth = month();
  int currentYear = year();
#elif defined(ARDUINO_ARCH_SAMD)
  int currentDay = RTCZ.getDay();
  int currentMonth = RTCZ.getMonth();
  int currentYear = RTCZ.getYear();
#endif
  if ((lastDisplayedDay == currentDay) &&
      (lastDisplayedMonth == currentMonth) &&
      (lastDisplayedYear == currentYear))
    return;
  lastDisplayedDay = currentDay;
  lastDisplayedMonth = currentMonth;
  lastDisplayedYear = currentYear;
  display.setFont(font10pt);
  display.fontColor(defaultFontColor, defaultFontBG);
  display.setCursor(2, 2);
#if defined (ARDUINO_ARCH_AVR)
  display.print(dayShortStr(weekday()));
  display.print(' ');
  display.print(month());
  display.print('/');
  display.print(day());
  display.print(F("  "));
#elif defined(ARDUINO_ARCH_SAMD)
  const char * wkday[] = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};
  time_t currentTime = RTCZ.getEpoch();
  struct tm* wkdaycalc = gmtime(&currentTime);
  display.print(wkday[wkdaycalc->tm_wday]);
  display.print(' ');
  display.print(RTCZ.getMonth());
  display.print('/');
  display.print(RTCZ.getDay());
  display.print(F("  "));
#endif
}

void updateMainDisplay() {
  if (lastSetBrightness != brightness) {
    display.setBrightness(brightness);
    lastSetBrightness = brightness;
  }
  updateDateDisplay();
  displayBattery();
  if (currentDisplayState == displayStateHome) {
    updateTimeDisplay();
    if (rewriteMenu || lastAmtNotificationsShown != amtNotifications) {
      lastAmtNotificationsShown = amtNotifications;
      display.setFont(font10pt);
      display.clearWindow(0, menuTextY[2], 96, 13);
      if (amtNotifications) {
        int printPos = 48 - (display.getPrintWidth(notificationLine1) / 2);
        if (printPos < 0)printPos = 0;
        display.setCursor(printPos, menuTextY[2]);
        display.print(notificationLine1);
      }
      display.setCursor(0, menuTextY[3]);
      display.print(F("< Menu          "));
      char viewStr[] = "View >";
      int Xpos = 95 - display.getPrintWidth(viewStr);
      display.setCursor(Xpos, menuTextY[3]);
      display.print(viewStr);
      rewriteMenu = false;
    }
  }
  lastMainDisplayUpdate = millisOffset();
}


uint8_t lastAMPMDisplayed = 0;
uint8_t lastHourDisplayed = -1;
uint8_t lastMinuteDisplayed = -1;
uint8_t lastSecondDisplayed = -1;

void updateTimeDisplay() {
  int currentHour, currentMinute, currentSecond;
#if defined (ARDUINO_ARCH_AVR)
  currentHour = hour();
  currentMinute = minute();
  currentSecond = second();
#elif defined(ARDUINO_ARCH_SAMD)
  currentHour = RTCZ.getHours();
  currentMinute = RTCZ.getMinutes();
  currentSecond = RTCZ.getSeconds();
#endif
  if (currentDisplayState != displayStateHome)
    return;
  char displayX;
  int hour12 = currentHour;
  int AMPM = 1;
  if (hour12 > 12) {
    AMPM = 2;
    hour12 -= 12;
  }
  display.fontColor(defaultFontColor, defaultFontBG);
  if (rewriteTime || lastHourDisplayed != hour12) {
    display.setFont(font22pt);
    lastHourDisplayed = hour12;
    displayX = 0;
    display.setCursor(displayX, timeY);
    if (lastHourDisplayed < 10)display.print('0');
    display.print(lastHourDisplayed);
    display.write(':');
    if (lastAMPMDisplayed != AMPM) {
      if (AMPM == 2)
        display.fontColor(inactiveFontColor, inactiveFontBG);
      display.setFont(font10pt);
      display.setCursor(displayX + 80, timeY - 0);
      display.print(F("AM"));
      if (AMPM == 2) {
        display.fontColor(defaultFontColor, defaultFontBG);
      } else {
        display.fontColor(inactiveFontColor, inactiveFontBG);
      }
      display.setCursor(displayX + 80, timeY + 11);
      display.print(F("PM"));
      display.fontColor(defaultFontColor, defaultFontBG);
    }
  }

  if (rewriteTime || lastMinuteDisplayed != currentMinute) {
    display.setFont(font22pt);
    lastMinuteDisplayed = currentMinute;
    displayX = 14 + 14 - 1;
    display.setCursor(displayX, timeY);
    if (lastMinuteDisplayed < 10)display.print('0');
    display.print(lastMinuteDisplayed);
    display.write(':');
  }

  if (rewriteTime || lastSecondDisplayed != currentSecond) {
    display.setFont(font22pt);
    lastSecondDisplayed = currentSecond;
    displayX = 14 + 14 + 14 + 14 - 2;
    display.setCursor(displayX, timeY);
    if (lastSecondDisplayed < 10)display.print('0');
    display.print(lastSecondDisplayed);
  }
  rewriteTime = false;
}

void displayBattery() {
  int result = 0;
#if defined (ARDUINO_ARCH_AVR)
  //http://forum.arduino.cc/index.php?topic=133907.0
  const long InternalReferenceVoltage = 1100L;
  ADMUX = (0 << REFS1) | (1 << REFS0) | (0 << ADLAR) | (1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (0 << MUX0);
  delay(10);
  ADCSRA |= _BV( ADSC );
  while ( ( (ADCSRA & (1 << ADSC)) != 0 ) );
  result = (((InternalReferenceVoltage * 1024L) / ADC) + 5L) / 10L;
  //SerialMonitorInterface.println(result);
  //if(result>440){//probably charging
  uint8_t charging = false;
  if (result > 450) {
    charging = true;
  }
  result = constrain(result - 300, 0, 120);
  uint8_t x = 70;
  uint8_t y = 3;
  uint8_t height = 5;
  uint8_t length = 20;
  uint8_t amtActive = (result * length) / 120;
  uint8_t red, green, blue;
  display.drawLine(x - 1, y, x - 1, y + height, 0xFF); //left boarder
  display.drawLine(x - 1, y - 1, x + length, y - 1, 0xFF); //top border
  display.drawLine(x - 1, y + height + 1, x + length, y + height + 1, 0xFF); //bottom border
  display.drawLine(x + length, y - 1, x + length, y + height + 1, 0xFF); //right border
  display.drawLine(x + length + 1, y + 2, x + length + 1, y + height - 2, 0xFF); //right border
  for (uint8_t i = 0; i < length; i++) {
    if (i < amtActive) {
      red = 63 - ((63 / length) * i);
      green = ((63 / length) * i);
      blue = 0;
    } else {
      red = 32;
      green = 32;
      blue = 32;
    }
    display.drawLine(x + i, y, x + i, y + height, red, green, blue);
  }
#elif defined(ARDUINO_ARCH_SAMD)
  //http://atmel.force.com/support/articles/en_US/FAQ/ADC-example
  SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
  while (ADC->STATUS.bit.SYNCBUSY == 1);
  ADC->SAMPCTRL.bit.SAMPLEN = 0x1;
  while (ADC->STATUS.bit.SYNCBUSY == 1);
  ADC->INPUTCTRL.bit.MUXPOS = 0x19;         // Internal bandgap input
  while (ADC->STATUS.bit.SYNCBUSY == 1);
  ADC->CTRLA.bit.ENABLE = 0x01;             // Enable ADC
  // Start conversion
  while (ADC->STATUS.bit.SYNCBUSY == 1);
  ADC->SWTRIG.bit.START = 1;
  // Clear the Data Ready flag
  ADC->INTFLAG.bit.RESRDY = 1;
  // Start conversion again, since The first conversion after the reference is changed must not be used.
  while (ADC->STATUS.bit.SYNCBUSY == 1);
  ADC->SWTRIG.bit.START = 1;
  // Store the value
  while ( ADC->INTFLAG.bit.RESRDY == 0 );   // Waiting for conversion to complete
  uint32_t valueRead = ADC->RESULT.reg;
  while (ADC->STATUS.bit.SYNCBUSY == 1);
  ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
  while (ADC->STATUS.bit.SYNCBUSY == 1);
  SYSCTRL->VREF.reg &= ~SYSCTRL_VREF_BGOUTEN;
  result = (((1100L * 1024L) / valueRead) + 5L) / 10L;
  uint8_t x = 70;
  uint8_t y = 3;
  uint8_t height = 5;
  uint8_t length = 20;
  uint8_t red, green;
  if (result > 325) {
    red = 0;
    green = 63;
  } else {
    red = 63;
    green = 0;
  }
  display.drawLine(x - 1, y, x - 1, y + height, 0xFF); //left boarder
  display.drawLine(x - 1, y - 1, x + length, y - 1, 0xFF); //top border
  display.drawLine(x - 1, y + height + 1, x + length, y + height + 1, 0xFF); //bottom border
  display.drawLine(x + length, y - 1, x + length, y + height + 1, 0xFF); //right border
  display.drawLine(x + length + 1, y + 2, x + length + 1, y + height - 2, 0xFF); //right border
  for (uint8_t i = 0; i < length; i++) {
    display.drawLine(x + i, y, x + i, y + height, red, green, 0);
  }
#endif
}

void setupDisplay() {
  SerialMonitorInterface.print("setupDisplay");
#if defined (ARDUINO_ARCH_AVR)
  for (int i = 0; i < 20; i++) {
    pinMode(i, INPUT_PULLUP);
  }
  setTime(1, 1, 1, 16, 2, 2016);
#elif defined(ARDUINO_ARCH_SAMD)
/*
  for (int i = 0; i < 27; i++) {
    pinMode(i, INPUT_PULLUP);
  }
  pinMode(28, INPUT_PULLUP);
  pinMode(29, INPUT_PULLUP);
  */
  pinMode(42, INPUT_PULLUP);
  pinMode(44, INPUT_PULLUP);
  pinMode(45, INPUT_PULLUP);
  pinMode(A4, INPUT);
  pinMode(2, INPUT);
  RTCZ.begin();
  RTCZ.setTime(16, 15, 1);//h,m,s
  RTCZ.setDate(25, 7, 16);//d,m,y
  //RTCZ.attachInterrupt(RTCwakeHandler);
  //RTCZ.enableAlarm(RTCZ.MATCH_HHMMSS);
  //RTCZ.setAlarmEpoch(RTCZ.getEpoch() + 1);
  attachInterrupt(TSP_PIN_BT1, wakeHandler, FALLING);
  attachInterrupt(TSP_PIN_BT2, wakeHandler, FALLING);
  attachInterrupt(TSP_PIN_BT3, wakeHandler, FALLING);
  attachInterrupt(TSP_PIN_BT4, wakeHandler, FALLING);
#endif
  pinMode(vibratePin, OUTPUT);
  digitalWrite(vibratePin, vibratePinInactive);

  display.begin();
  display.setFlip(true);
  initHomeScreen();
  requestScreenOn();
  delay(100);

#if defined(ARDUINO_ARCH_SAMD)
  // https://github.com/arduino/ArduinoCore-samd/issues/142
  // Clock EIC in sleep mode so that we can use pin change interrupts
  // The RTCZero library will setup generic clock 2 to XOSC32K/32
  // and we'll use that for the EIC. Increases power consumption by ~50uA
  GCLK->CLKCTRL.reg = uint16_t(GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK2 | GCLK_CLKCTRL_ID( GCLK_CLKCTRL_ID_EIC_Val ) );
  while (GCLK->STATUS.bit.SYNCBUSY) {}
#endif
  //display.off();
  //while (1) RTCZ.standbyMode();
}

int requestScreenOn() {
  sleepTimer = millisOffset();
  if (!displayOn) {
    displayOn = 1;
    updateMainDisplay();
    display.on();
    return 1;
  }
  return 0;
}

void displayLoop() {
// what is the millis() function?
// why have vibration code in the display loop?
// Because we are tracking timing side effects here?
// Probably time to throw out this code!
  if (doVibrate) {
    uint32_t td = millisOffset() - doVibrate;
    if (td > 0 && td < 100) {
      digitalWrite(vibratePin, vibratePinActive);
    } else if (td > 200 && td < 300) {
      digitalWrite(vibratePin, vibratePinActive);
    } else {
      digitalWrite(vibratePin, vibratePinInactive);
      if (td > 300)doVibrate = 0;
    }
  }

  if (displayOn && (millisOffset() > mainDisplayUpdateInterval + lastMainDisplayUpdate)) {
    updateMainDisplay();
  }
  if (millisOffset() > sleepTimer + ((unsigned long)sleepTimeout*1000ul)) {
    if (displayOn) {
      displayOn = 0;
      display.off();
    }
#if defined(ARDUINO_ARCH_SAMD)
    // watchSleep();
#endif
  }
  checkButtons();
}

void checkButtons() {
  byte buttons = display.getButtons();
  if (buttonReleased && buttons) {
    SerialMonitorInterface.println("Pressed!");
    if (displayOn)
      buttonPress(buttons);
    requestScreenOn();
    buttonReleased = 0;
  }
  if (!buttonReleased && !(buttons & 0x0F)) {
    buttonReleased = 1;
  }
}
